/*
다른 언어와 다른 결정적인 것이 stream이다. 얻너 오브젝트에서 오퍼레이터로 들어가는 것처럼, 나오는 것 처럼 코딩을 할 수 ㅣㅇㅆ다.

Input & Output -> 컴퓨터는 바이트 단위로 계산. 중학교때 물질을 이루는 가장 기본단위는 원자인데 문질의 특성을 발현시키는 최소의 단위는 분자이다. 워드는 분자같은 것이다. 기본단위는 바이트인데 인풋과 아웃풋은 이러한 바이트의 일차원적인 흐름이다. 흐름이라는 단어에 꽂혀서 stream이라고 한것이다. ostream = output stream, istream = Input stream 이다. 기본적으로 이 스트림을 이용한다. CPU에서만 데이터 처리르 한다. (폰노이만 방식) 모든 길은 CPU를통한다. input과 output은 cpu입장에서 오는게 인풋, cPu에서 나가는게 아웃풋. 기본적으로 바이트인데 1바이트씩 ㅗㅆ다갔다는 너무 비효율이다. 셔틀을 타고 오고 싶어서 셔틀을 만들고 싶다. 셔틀을 만들었어. 셔틀을 탔어. 근데 한명타고 출발. 옸다 갔다 = 기름이 너무 낭비야. 셔틀운전사 아저씨가 좀만 기다려 금방 차 = 셔틀 꽉 차면 출발. 이게 효율적이다. CPU에서 느린 IO를 대응해야되서 이게 너무 시간낭비라서 셔틀 버스를 이용하는게 그게 버퍼 이다. 버퍼에 데이터가 꽉 차면 그때 나가 버퍼에 데이터가 꽉 차면 들어가 이런 개념을 도입하게 된다.

CPU와 IO는 속도가 너무 달라. 그래서 효율성을 위해서 퍼버를 만들어서 모아서 인풋, 모아서 아웃풋하는 개념이다.

그래서 이런거를 다 함수로 표현하는데 c++은 <<(output) >>(input) 우리가 오퍼레이터 오버로딩을 통해서 확장시켜줄 수 있다. 오퍼레이터로 처리할 수 ㅣㅇㅆ었던 문법적 차이는 c++은 프로그래머에게 자유로운 오퍼레이터 오버로딩을 허용한다.

Files -> 지금ㄲ지는 standard intput, output을 많이 써왔따. 이거 뿐만이 아니라 이걸 확장해서 파일, 네트워크, 데이터가 오고가는 다양한 장치들에게 모두 적용할 수 이싿. 하나의 >> 오퍼레이터를 토애헛 이게 다형성이라고 한다. 모든 장치들을 >> 를 통해서 사용할 수 있도록 한다.
저장장치에 저장하는 것을 파일이라고 하는데 파일은 읽을수도 있고 쓸수도 있다. 파일도 기본적으로 바이트가 일렬로 저장 -> 그냥 ㅗ면 바이튼데 어떻게 해석하는 지는 딴 문제이다. 파워포인트 -> 가까이서 보면 픽셀, 멀리서 보면 직사각형 그래서 무슨 의미인지를 몰라 물리적의미가 배제던0, 1의 나열. 이거를 어떻게 해석할지는 다른 문제이다. 기곚ㄱ으로 0, 1의 정보가 저장되어 있는 것이고 이를 어떻ㄱ 해석할지는 전적으로 으용ㅇ 프로그램 역할이다.

파일을 CPU로 들어가야된다. 똑같이 stream 개념으로 보겠다.
*/